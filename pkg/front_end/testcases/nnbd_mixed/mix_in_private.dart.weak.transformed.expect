library;
import self as self;
import "dart:core" as core;
import "mix_in_private_lib.dart" as mix;

import "org-dartlang-testcase:///mix_in_private_lib.dart";

class A extends core::Object {
  synthetic constructor •() → self::A*
    : super core::Object::•()
    ;
  abstract member-signature get /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/object_patch.dart */ _identityHashCode() → core::int*; -> core::Object::_identityHashCode
  abstract member-signature method /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/object_patch.dart */ _instanceOf(dynamic instantiatorTypeArguments, dynamic functionTypeArguments, dynamic type) → core::bool*; -> core::Object::_instanceOf
  abstract member-signature method /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/object_patch.dart */ _simpleInstanceOf(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOf
  abstract member-signature method /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/object_patch.dart */ _simpleInstanceOfTrue(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfTrue
  abstract member-signature method /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/object_patch.dart */ _simpleInstanceOfFalse(dynamic type) → core::bool*; -> core::Object::_simpleInstanceOfFalse
  abstract member-signature operator /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/object_patch.dart */ ==(dynamic other) → core::bool*; -> core::Object::==
  abstract member-signature get /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/object_patch.dart */ hashCode() → core::int*; -> core::Object::hashCode
  abstract member-signature method /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/object_patch.dart */ toString() → core::String*; -> core::Object::toString
  abstract member-signature method /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/object_patch.dart */ noSuchMethod(core::Invocation* invocation) → dynamic; -> core::Object::noSuchMethod
  abstract member-signature get /* from org-dartlang-sdk:///sdk/lib/_internal/vm/lib/object_patch.dart */ runtimeType() → core::Type*; -> core::Object::runtimeType
}
class C extends self::A implements mix::Private /*isEliminatedMixin*/  {
  synthetic constructor •() → self::C*
    : super self::A::•()
    ;
  abstract method /*isNonNullableByDefault, from org-dartlang-testcase:///mix_in_private_lib.dart */ _privateAbstractMethod(core::int? i) → void;
  method /*isNonNullableByDefault, from org-dartlang-testcase:///mix_in_private_lib.dart */ _privateConcreteMethod(core::int? i) → void {}
}
static method main() → dynamic {}

library /*isNonNullableByDefault*/;
import self as mix;
import "dart:core" as core;

abstract class Private extends core::Object {
  synthetic constructor •() → mix::Private
    : super core::Object::•()
    ;
  abstract method _privateAbstractMethod(core::int? i) → void;
  method _privateConcreteMethod(core::int? i) → void {}
}
